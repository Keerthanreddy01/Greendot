import '../models/government_scheme_model.dart';

class GovernmentSchemeService {
  // Demo government schemes
  static List<GovernmentScheme> getDemoSchemes() {
    final now = DateTime.now();
    
    return [
      // PM-KISAN
      GovernmentScheme(
        id: 'pm_kisan',
        name: 'PM-KISAN',
        schemeNameLocal: '‡§™‡•ç‡§∞‡§ß‡§æ‡§®‡§Æ‡§Ç‡§§‡•ç‡§∞‡•Ä ‡§ï‡§ø‡§∏‡§æ‡§® ‡§∏‡§Æ‡•ç‡§Æ‡§æ‡§® ‡§®‡§ø‡§ß‡§ø',
        description: 'Direct income support of ‚Çπ6000 per year to all farmer families',
        descriptionLocal: '‡§∏‡§≠‡•Ä ‡§ï‡§ø‡§∏‡§æ‡§® ‡§™‡§∞‡§ø‡§µ‡§æ‡§∞‡•ã‡§Ç ‡§ï‡•ã ‡§™‡•ç‡§∞‡§§‡§ø ‡§µ‡§∞‡•ç‡§∑ ‚Çπ6000 ‡§ï‡•Ä ‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡§ï‡•ç‡§∑ ‡§Ü‡§Ø ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ',
        category: 'pension',
        state: 'All India',
        eligibility: ['All farmer families with cultivable land'],
        benefits: ['‚Çπ6000 per year in 3 installments'],
        benefitAmount: 6000,
        howToApply: 'Visit nearest CSC or apply online at pmkisan.gov.in',
        applyUrl: 'https://pmkisan.gov.in',
        deadline: DateTime(now.year, 12, 31),
        imageUrl: '',
        isActive: true,
        iconName: 'üí∞',
        documents: ['Aadhaar Card', 'Land Records', 'Bank Account'],
      ),
      
      // Crop Insurance
      GovernmentScheme(
        id: 'pmfby',
        schemeName: 'Pradhan Mantri Fasal Bima Yojana',
        schemeNameLocal: '‡§™‡•ç‡§∞‡§ß‡§æ‡§®‡§Æ‡§Ç‡§§‡•ç‡§∞‡•Ä ‡§´‡§∏‡§≤ ‡§¨‡•Ä‡§Æ‡§æ ‡§Ø‡•ã‡§ú‡§®‡§æ',
        description: 'Comprehensive crop insurance against natural calamities',
        descriptionLocal: '‡§™‡•ç‡§∞‡§æ‡§ï‡•É‡§§‡§ø‡§ï ‡§Ü‡§™‡§¶‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§ñ‡§ø‡§≤‡§æ‡§´ ‡§µ‡•ç‡§Ø‡§æ‡§™‡§ï ‡§´‡§∏‡§≤ ‡§¨‡•Ä‡§Æ‡§æ',
        category: 'insurance',
        benefitAmount: 200000,
        eligibility: 'All farmers growing notified crops',
        howToApply: 'Register within 7 days of sowing at pmfby.gov.in',
        deadline: DateTime(now.year, now.month + 1, 15),
        isActive: true,
        iconName: 'üõ°Ô∏è',
        documents: ['Aadhaar', 'Land Records', 'Sowing Certificate'],
      ),
      
      // Kisan Credit Card
      GovernmentScheme(
        id: 'kcc',
        schemeName: 'Kisan Credit Card',
        schemeNameLocal: '‡§ï‡§ø‡§∏‡§æ‡§® ‡§ï‡•ç‡§∞‡•á‡§°‡§ø‡§ü ‡§ï‡§æ‡§∞‡•ç‡§°',
        description: 'Short term credit for agriculture at 4% interest',
        descriptionLocal: '4% ‡§¨‡•ç‡§Ø‡§æ‡§ú ‡§™‡§∞ ‡§ï‡•É‡§∑‡§ø ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§≤‡•ç‡§™‡§ï‡§æ‡§≤‡§ø‡§ï ‡§ã‡§£',
        category: 'loan',
        benefitAmount: 300000,
        eligibility: 'Individual farmers, tenant farmers, sharecroppers',
        howToApply: 'Visit nearest bank branch with land documents',
        deadline: DateTime(now.year, 12, 31),
        isActive: true,
        iconName: 'üí≥',
        documents: ['Aadhaar', 'PAN Card', 'Land Records', 'Photo'],
      ),
      
      // Solar Pump Subsidy
      GovernmentScheme(
        id: 'kusum',
        schemeName: 'PM-KUSUM Solar Pump Subsidy',
        schemeNameLocal: '‡§™‡•Ä‡§è‡§Æ-‡§ï‡•Å‡§∏‡•Å‡§Æ ‡§∏‡•å‡§∞ ‡§™‡§Ç‡§™ ‡§∏‡§¨‡•ç‡§∏‡§ø‡§°‡•Ä',
        description: 'Install solar pumps with 60% subsidy',
        descriptionLocal: '60% ‡§∏‡§¨‡•ç‡§∏‡§ø‡§°‡•Ä ‡§ï‡•á ‡§∏‡§æ‡§• ‡§∏‡•ã‡§≤‡§∞ ‡§™‡§Ç‡§™ ‡§∏‡•ç‡§•‡§æ‡§™‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç',
        category: 'subsidy',
        benefitAmount: 180000,
        eligibility: 'Farmers with agricultural land',
        howToApply: 'Apply through State Agriculture Department',
        deadline: DateTime(now.year, 11, 30),
        isActive: true,
        iconName: '‚òÄÔ∏è',
        documents: ['Land Records', 'Electricity Bill', 'Bank Account'],
      ),
      
      // Soil Health Card
      GovernmentScheme(
        id: 'shc',
        schemeName: 'Soil Health Card Scheme',
        schemeNameLocal: '‡§Æ‡•É‡§¶‡§æ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ï‡§æ‡§∞‡•ç‡§° ‡§Ø‡•ã‡§ú‡§®‡§æ',
        description: 'Free soil testing and health card',
        descriptionLocal: '‡§Æ‡•Å‡§´‡•ç‡§§ ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§î‡§∞ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ï‡§æ‡§∞‡•ç‡§°',
        category: 'training',
        benefitAmount: 0,
        eligibility: 'All farmers',
        howToApply: 'Visit nearest Soil Testing Lab or Agriculture Office',
        deadline: DateTime(now.year, 12, 31),
        isActive: true,
        iconName: 'üß™',
        documents: ['Aadhaar Card', 'Land Records'],
      ),
      
      // Micro Irrigation
      GovernmentScheme(
        id: 'micro_irrigation',
        schemeName: 'Micro Irrigation Scheme',
        schemeNameLocal: '‡§∏‡•Ç‡§ï‡•ç‡§∑‡•ç‡§Æ ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§Ø‡•ã‡§ú‡§®‡§æ',
        description: 'Drip and sprinkler irrigation with 55% subsidy',
        descriptionLocal: '‡§°‡•ç‡§∞‡§ø‡§™ ‡§î‡§∞ ‡§∏‡•ç‡§™‡•ç‡§∞‡§ø‡§Ç‡§ï‡§≤‡§∞ ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§™‡§∞ 55% ‡§∏‡§¨‡•ç‡§∏‡§ø‡§°‡•Ä',
        category: 'subsidy',
        benefitAmount: 165000,
        eligibility: 'Small and marginal farmers',
        howToApply: 'Apply at District Horticulture Office',
        deadline: DateTime(now.year, 10, 31),
        isActive: true,
        iconName: 'üíß',
        documents: ['Land Records', 'Bank Account', 'Quotation'],
      ),
      
      // Rythu Bharosa (Telangana State Scheme)
      GovernmentScheme(
        id: 'rythu_bharosa',
        schemeName: 'Rythu Bharosa',
        schemeNameLocal: '‡∞∞‡±à‡∞§‡±Å ‡∞≠‡∞∞‡±ã‡∞∏‡∞æ',
        description: 'Telangana state scheme - ‚Çπ5000 per acre per season',
        descriptionLocal: '‡∞§‡±Ü‡∞≤‡∞Ç‡∞ó‡∞æ‡∞£ ‡∞∞‡∞æ‡∞∑‡±ç‡∞ü‡±ç‡∞∞ ‡∞™‡∞•‡∞ï‡∞Ç - ‡∞™‡±ç‡∞∞‡∞§‡∞ø ‡∞∏‡±Ä‡∞ú‡∞®‡±ç‡∞ï‡±Å ‡∞é‡∞ï‡∞∞‡∞æ‡∞ï‡±Å ‚Çπ5000',
        category: 'pension',
        benefitAmount: 5000,
        eligibility: 'Farmers in Telangana with land records',
        howToApply: 'Automatic transfer to registered farmers',
        deadline: DateTime(now.year, 12, 31),
        isActive: true,
        iconName: 'üåæ',
        documents: ['Land Records', 'Bank Account', 'Aadhaar'],
      ),
      
      // Organic Farming
      GovernmentScheme(
        id: 'pkvy',
        schemeName: 'Paramparagat Krishi Vikas Yojana',
        schemeNameLocal: '‡§™‡§∞‡§Æ‡•ç‡§™‡§∞‡§æ‡§ó‡§§ ‡§ï‡•É‡§∑‡§ø ‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§Ø‡•ã‡§ú‡§®‡§æ',
        description: 'Promote organic farming with ‚Çπ50,000 per hectare',
        descriptionLocal: '‡§ú‡•à‡§µ‡§ø‡§ï ‡§ñ‡•á‡§§‡•Ä ‡§ï‡•ã ‡§¨‡§¢‡§º‡§æ‡§µ‡§æ - ‚Çπ50,000 ‡§™‡•ç‡§∞‡§§‡§ø ‡§π‡•á‡§ï‡•ç‡§ü‡•á‡§Ø‡§∞',
        category: 'subsidy',
        benefitAmount: 50000,
        eligibility: 'Farmers adopting organic farming',
        howToApply: 'Form cluster of 50 farmers and apply',
        deadline: DateTime(now.year, 9, 30),
        isActive: true,
        iconName: 'üå±',
        documents: ['Land Records', 'Group Registration', 'Bank Account'],
      ),
    ];
  }

  // Demo notifications
  static List<SchemeNotification> getDemoNotifications() {
    final now = DateTime.now();
    
    return [
      SchemeNotification(
        id: 'notif_1',
        schemeId: 'pm_kisan',
        title: 'PM-KISAN Payment Received',
        message: '‚Çπ2000 credited to your account for Kharif 2025',
        notificationDate: now.subtract(const Duration(hours: 2)),
        isRead: false,
        type: 'approved',
      ),
      SchemeNotification(
        id: 'notif_2',
        schemeId: 'pmfby',
        title: 'Crop Insurance Reminder',
        message: 'Last 3 days to register for Rabi crop insurance',
        notificationDate: now.subtract(const Duration(days: 1)),
        isRead: false,
        type: 'reminder',
      ),
      SchemeNotification(
        id: 'notif_3',
        schemeId: 'kusum',
        title: 'New Scheme Alert',
        message: 'Solar pump subsidy applications now open!',
        notificationDate: now.subtract(const Duration(days: 2)),
        isRead: true,
        type: 'new',
      ),
      SchemeNotification(
        id: 'notif_4',
        schemeId: 'rythu_bharosa',
        title: 'Rythu Bharosa Payment',
        message: '‚Çπ5000 per acre will be credited by 15th Nov',
        notificationDate: now.subtract(const Duration(days: 3)),
        isRead: false,
        type: 'approved',
      ),
    ];
  }

  // Get active schemes
  static List<GovernmentScheme> getActiveSchemes() {
    return getDemoSchemes().where((scheme) => scheme.isActive).toList();
  }

  // Get schemes by category
  static List<GovernmentScheme> getSchemesByCategory(String category) {
    return getDemoSchemes()
        .where((scheme) => scheme.category == category)
        .toList();
  }

  // Get unread notifications
  static List<SchemeNotification> getUnreadNotifications() {
    return getDemoNotifications().where((notif) => !notif.isRead).toList();
  }

  // Get notifications count
  static int getUnreadCount() {
    return getUnreadNotifications().length;
  }

  // Search schemes
  static List<GovernmentScheme> searchSchemes(String query) {
    final lowerQuery = query.toLowerCase();
    return getDemoSchemes()
        .where((scheme) =>
            scheme.schemeName.toLowerCase().contains(lowerQuery) ||
            scheme.description.toLowerCase().contains(lowerQuery))
        .toList();
  }
}
